### Set up interrupt vectors
loadwi $0 0

# first vector
strapr $0 .intr_vec

# Point to next vector
addi $0 1 $0

# Remaining vectors
.write_vector
strapr $0 .exit
addi $0 1 $0
jmpgei $0 0xFF .write_done  # 256 vectors
jmp .write_vector  # Next vector

.write_done

# Clear $0
loadwi $0 0

# Enable interrupts
loadwi $stat 0x00000001

### Set up interrupt controller
savewi 0x40 &FFFFEFD2
savewi .keyboard_intr &FFFFEFD6
savebi 1 &FFFFEFDA
savewi 0 &FFFFEFCE

### Set up keyboard
savewi 1 &FFFFEFC1

### Write enable the storage device
savewi 1 &FFFFEDB4

### Store the size of the storage device in $4
loadw $4 &FFFFEDB8

### Main loop
.loop

# Wait for interrupt
wait

# Check flag
jmpeqi $0 1 .exit

# Write to disk at offset $2 (modulo 512)
addi $2 0xFFFFEDBC $3
savebr $1 $3

# Compute next offset
addi $2 1 $2

# Are we over the window?
jmplti $2 0x200 .lt_200

# Reset and shift the offset to the next 512-byte block
loadwi $2 0
loadw $3 &FFFFEDB0
addi $3 0x200 $3

# Did we overshoot?
jmple $3 $4 .save_offset

# We overshot the size, wrap around
loadwi $3 0

# Save the new offset to the storage offset register
.save_offset
savew $3 &FFFFEDB0

.lt_200

# And back around
jmp .loop


### Keyboard interrupt
.keyboard_intr

# Read keystroke
loadw $1 &FFFFEFC5

# Print it if nonzero
jmpeqi $1 0 .return
saveb $1 &FFFFEFFF

# Is the keystroke a tilde?
jmpnei $1 0x7E .return

# It is, so set the flag to exit
loadwi $0 1

# Return
.return
# Reenable interrupts
savewi 0 &FFFFEFCE
rfe

### End program
.exit
halt

### Interrupt vector
.intr_vec
jmp &FFFFEFEA
