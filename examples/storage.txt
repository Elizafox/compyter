# Entry
jmp .start

# Interrupt vectors
.intr_vec
jmp FFFFFFEA
halt
halt
halt

# Program

# Set up interrupt controller
.start
savewi 40 FFFFFFD2
savewi .keyboard_intr FFFFFFD6
savebi 1 FFFFFFDA
savewi 0 FFFFFFCE

# Set up keyboard
savewi 1 FFFFFFC1

# Write enable the storage device
savewi 1 FFFFFDB4

# Store the size of the storage device in E
loadw E FFFFFDB8

# Main loop
.loop

# Wait for interrupt
wait

# Check flag
jmpeqi A 1 .exit

# Write to disk at offset C (modulo 512)
addi C FFFFFDC0 D
savebr B D

# Compute next offset
addi C 1 C

# Are we over the window?
jmplti C 200 .lt_200

# Reset and shift the offset to the next 512-byte block
loadwi C 0
loadw D FFFFFDB0
addi D 200 D

# Did we overshoot?
jmple D E .save_offset

# We overshot the size, wrap around
loadwi D 0

# Save the new offset to the storage offset register
.save_offset
savew D FFFFFDB0

.lt_200

# And back around
jmp .loop

### Keyboard interrupt ###
.keyboard_intr

# Read keystroke
loadw B FFFFFFC5

# Print it if nonzero
jmpeqi B 0 .return
saveb B FFFFFFFF

# Is the keystroke a tilde?
jmpnei B 7E .return

# It is, so set the flag to exit
loadwi A 1

# Return
.return
# Reenable interrupts
savewi 0 FFFFFFCE 0
ret

# End program
.exit
halt
