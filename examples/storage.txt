### Set up interrupt vectors
loadwi 15 0

# first vector
strapr 15 .intr_vec

# Point to next vector
addi 15 1 15

# Remaining vectors
.write_vector
strapr 15 .exit
addi 15 1 15
jmpgei 15 10 .write_done  # 16 vectors
jmp .write_vector  # Next vector

.write_done

eni  # Enable interrupts

### Set up interrupt controller
savewi 40 FFFFFED2
savewi .keyboard_intr FFFFFED6
savebi 1 FFFFFEDA
savewi 0 FFFFFECE

### Set up keyboard
savewi 1 FFFFFEC1

### Write enable the storage device
savewi 1 FFFFFCB4

### Store the size of the storage device in E
loadw E FFFFFCB8

### Main loop
.loop

# Wait for interrupt
wait

# Check flag
jmpeqi A 1 .exit

# Write to disk at offset C (modulo 512)
addi C FFFFFCC0 D
savebr B D

# Compute next offset
addi C 1 C

# Are we over the window?
jmplti C 200 .lt_200

# Reset and shift the offset to the next 512-byte block
loadwi C 0
loadw D FFFFFCB0
addi D 200 D

# Did we overshoot?
jmple D E .save_offset

# We overshot the size, wrap around
loadwi D 0

# Save the new offset to the storage offset register
.save_offset
savew D FFFFFCB0

.lt_200

# And back around
jmp .loop


### Keyboard interrupt
.keyboard_intr

# Read keystroke
loadw B FFFFFEC5

# Print it if nonzero
jmpeqi B 0 .return
saveb B FFFFFEFF

# Is the keystroke a tilde?
jmpnei B 7E .return

# It is, so set the flag to exit
loadwi A 1

# Return
.return
# Reenable interrupts
savewi 0 FFFFFECE 0
ret

### End program
.exit
halt

### Interrupt vector
.intr_vec
jmp FFFFFEEA
