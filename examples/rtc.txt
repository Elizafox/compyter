### Set up interrupt vectors
loadwi $0 0

# first vector
strapr $0 .intr_vec

# Point to next vector
addi $0 1 $0

# Remaining vectors
.write_vector
strapr $0 .exit
addi $0 1 $0
jmpgei $0 0xFF .write_done  # 256 vectors
jmp .write_vector  # Next vector

.write_done

### Initalise stack
loadwi $sp .stack

### Print the year
loadw $0 &FFFFE937           	# RTC year
loadwi $1 .string_loc
loadwi $9 .return_itoa_year	# Return address
jmp .itoa
.return_itoa_year

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_year
jmp .print
.return_print_year

## Print a dash
loadwi $0 .string_loc
savewi 0x2D000000 .string_loc
loadwi $9 .return_print_year_dash
jmp .print
.return_print_year_dash

### Print the month
loadb $0 &FFFFE93B           	# RTC month
loadwi $1 .string_loc
loadwi $9 .return_itoa_month	# Return address
jmp .itoa
.return_itoa_month

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_month
jmp .print
.return_print_month

## Print a dash
loadwi $0 .string_loc
savewi 0x2D000000 .string_loc
loadwi $9 .return_print_month_dash
jmp .print
.return_print_month_dash

### Print the day
loadb $0 &FFFFE93C           	# RTC day
loadwi $1 .string_loc
loadwi $9 .return_itoa_day	# Return address
jmp .itoa
.return_itoa_day

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_day
jmp .print
.return_print_day

## Print a space
loadwi $0 .string_loc
savewi 0x20000000 .string_loc
loadwi $9 .return_print_day_space
jmp .print
.return_print_day_space

### Print the hour
loadb $0 &FFFFE93D           	# RTC hour
loadwi $1 .string_loc
loadwi $9 .return_itoa_hour	# Return address
jmp .itoa
.return_itoa_hour

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_hour
jmp .print
.return_print_hour

## Print a colon
loadwi $0 .string_loc
savewi 0x3A000000 .string_loc
loadwi $9 .return_print_hour_colon
jmp .print
.return_print_hour_colon

### Print the minute
loadb $0 &FFFFE93E           	# RTC minute
loadwi $1 .string_loc
loadwi $9 .return_itoa_minute	# Return address
jmp .itoa
.return_itoa_minute

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_minute
jmp .print
.return_print_minute

## Print a colon
loadwi $0 .string_loc
savewi 0x3A000000 .string_loc
loadwi $9 .return_print_minute_colon
jmp .print
.return_print_minute_colon

### Print the second
loadb $0 &FFFFE93F           	# RTC second
loadwi $1 .string_loc
loadwi $9 .return_itoa_second	# Return address
jmp .itoa
.return_itoa_second

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_second
jmp .print
.return_print_second

## Print a dot
loadwi $0 .string_loc
savewi 0x2E000000 .string_loc
loadwi $9 .return_print_second_dot
jmp .print
.return_print_second_dot

### Print the microsecond
loadw $0 &FFFFE940		# RTC microsecond
loadwi $1 .string_loc
loadwi $9 .return_itoa_usec	# Return address
jmp .itoa
.return_itoa_usec

## Print the string
loadwi $0 .string_loc
loadwi $9 .return_print_usec
jmp .print
.return_print_usec

## Print a line feed
loadwi $0 .string_loc
savewi 0xA000000 .string_loc
loadwi $9 .return_print_usec_lf
jmp .print
.return_print_usec_lf

### End program
.exit
halt


### print function
# Input: Register 9: Return address
# Input: Register 0: Start location of our string
.print

# Push to the stack
addi $sp 4 $sp
savewr $0 $sp
addi $sp 4 $sp
savewr $1 $sp

.print_loop

# Load character
loadbr $1 $0

# Have we reached null?
jmpeqi $1 0 .print_end

# Not null, print the character
saveb $1 &FFFFEFFF

# Next character
addi $0 0x1 $0

# And back around
jmp .print_loop

.print_end

# Pop off the stack
loadwr $1 $sp
subi $sp 4 $sp
loadwr $0 $sp
subi $sp 4 $sp

# Return
jmpr $9


### itoa function
# Input: Register $9: Return address
# Input: Register $0: Our number to convert to a string
# Input: Register $1: Destination address for null-terminated string (must be at least 12 bytes)
.itoa

# Push to the stack
addi $sp 4 $sp
savewr $0 $sp
addi $sp 4 $sp
savewr $1 $sp
addi $sp 4 $sp
savewr $2 $sp
addi $sp 4 $sp
savewr $3 $sp
addi $sp 4 $sp
savewr $4 $sp
addi $sp 4 $sp
savewr $5 $sp
addi $sp 4 $sp
savewr $6 $sp

# Save $1 (destination)
copy $2 $1

# Begin zeroing
savewri 0 $1  # 0x0-0x3
addi $1 4 $1
savewri 0 $1  # 0x4-0x7
addi $1 4 $1
savewri 0 $1  # 0x8-0xc

# Restore $1
swap $2 $1

# Zero must be handled specially
jmpnei $0 0 .itoa_non_zero

# It's zero.
savebri 0x30 $1   # Save ASCII 0 to the string

# Return
jmp .itoa_done

# It isn't zero, continue
.itoa_non_zero

# Zero out the negative flag ($2)
loadwi $2 0

# Store original offset in $4
copy $4 $1

# Is it negative?
jmpgti $0 0 .itoa_loop

# It's negative, negate it
muli $0 -1 $0
loadwi $2 1    # Set negative flag

.itoa_loop

# While the number is not zero
jmpeqi $0 0 .itoa_loop_done

modi $0 0xA $3
addi $3 0x30 $3  # Add ASCII '0' to obtain the digit
savebr $3 $1     # Write it to the string
addi $1 0x1 $1   # Next character
divi $0 0xA $0

jmp .itoa_loop    # Back around

.itoa_loop_done

# Number is not negative, skip this bit
jmpeqi $2 0 .itoa_reverse

# Number is negative, add the sign
savebri 0x2D $1
addi $1 1 $1

.itoa_reverse

# Start position
loadwi $2 0

# Compute end position using original offset ($4)
sub $1 $4 $3
subi $3 1 $3

.itoa_reverse_loop

# Check if we've reversed the whole string
jmpge $2 $3 .itoa_done

# Get start char
add $4 $2 $0    # string start + start offset
loadbr $5 $0    # Load start char into $5

# Get end char
add $4 $3 $1    # string start + end offset
loadbr $6 $1    # Load end char into $6

# Swap the characters
savebr $5 $1     # Load start char into $1 (start offset)
savebr $6 $0     # Load end char into $0 (end offset)

addi $2 1 $2     # Start offset
subi $3 1 $3     # End offset

# Loop again
jmp .itoa_reverse_loop

.itoa_done

# Pop from the stack
loadwr $6 $sp
subi $sp 4 $sp
loadwr $5 $sp
subi $sp 4 $sp
loadwr $4 $sp
subi $sp 4 $sp
loadwr $3 $sp
subi $sp 4 $sp
loadwr $2 $sp
subi $sp 4 $sp
loadwr $1 $sp
subi $sp 4 $sp
loadwr $0 $sp
subi $sp 4 $sp

# Jump back
jmpr $9


### Interrupt vector
.intr_vec
jmp &FFFFFEEA

### Stack
.stack
!zero 0x400
!align 0x4
.end_stack

### String location
.string_loc
!zero 0x10
!align 0x4
.end_string_loc
