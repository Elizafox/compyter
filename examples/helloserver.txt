### Set up interrupt vectors
loadwi $0 0

# first vector
strapr $0 .intr_vec

# Point to next vector
addi $0 1 $0

# Remaining vectors
.write_vector
strapr $0 .exit
addi $0 1 $0
jmpgei $0 0xFF .write_done  # 256 vectors
jmp .write_vector  # Next vector

.write_done

# Enabloe interrupts
loadwi $stat 0x00000001

#### Program

### Set up interrupt controller
savewi 0xC0 &FFFFEFD2
savewi .async_intr &FFFFEFD6
savebi 0x1 &FFFFEFDA
savewi 0x0 &FFFFEFCE

### Get socket
# IPv4
savewi 0x1 &FFFFE95F

# TCP
savewi 0x1 &FFFFE963

# Open socket
savewi 0x1 &FFFFE96B

# Did we succeed?
loadw $1 &FFFFE973
jmplti $1 0 .exit

# Load socket into $1
loadw $1 &FFFFE967

### Bind
# 0.0.0.0
savewi 0x0 &FFFFE94F
savewi 0x0 &FFFFE953
savewi 0x0 &FFFFE957
savewi 0x0 &FFFFE95B

# Port 6969
savewi 0x1B39 &FFFFE96F

# Perform bind
savewi 0x2 &FFFFE96B

# Did we succeed?
loadw $0 &FFFFE973
jmplti $0 0 .exit

### Listen!
savewi 0x4 &FFFFE96B

# Did we succeed?
loadw $0 &FFFFE973
jmplti $0 0 .exit

### Set up interrupt event for listening
savewi 0x1 &FFFFE96F
savewi 0xF &FFFFE96B

### Main loop
.loop

# Wait for an interrupt
wait

# And back around
jmp .loop

### Accept routine
.async_intr

# Load the connection from the async handle reg
loadw $2 &FFFFE97B

# Store it in the main controller register
savew $2 &FFFFE967

# Accept the connection
savewi 0x5 &FFFFE96B

# Did it give us an error?
loadw $0 &FFFFE973
jmpgti $0 0 .async_intr_end

# Copy "Hello world!\r\n" to the buffer
savewi 0x68656C6C &FFFFE9AF
savewi 0x6F20776F &FFFFE9B3
savewi 0x726C6421 &FFFFE9B7
savewi 0x0D0A0000 &FFFFE9BB

# Save buffer length
savewi 0xE &FFFFE9AB

# Erase params before send
savewi 0x0 &FFFFE96F

# Perform send
savewi 0xA &FFFFE96B

# Close the client connection
savewi 0x6 &FFFFE96B

# Restore the listening socket
savew $1 &FFFFE967

.async_intr_end
# Reenable interrupts
savewi 0x0 &FFFFEFCE

# Set handler as done
savewi 0x11 &FFFFE96B
rfe

### End program
.exit
halt

### Interrupt vector
.intr_vec
jmp &FFFFEFEA
